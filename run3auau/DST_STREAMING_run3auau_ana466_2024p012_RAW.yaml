DST_STREAMING_EVENT_run3auau_streams:

   params:
     name:       DST_STREAMING_EVENT_$(streamname)_run3auau
     build:      ana.466
     build_name: ana466
     dbtag:      nocdbtag
     version:    1
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_parallel_streams.sh
     payload :   ./ProdFlow/run3auau/streaming/
     neventsper:  10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/streaming/*,odbc.ini"
     mem     :   4000MB

   input:
      db: raw
      direct_path: /sphenix/lustre01/sphnxpro/{mode}/*/cosmics/
      query: |-
        with run2pp as (
              select 55029 as firstrun,
                     55666 as lastrun
         ),
         streams as (select distinct split_part( split_part(filename,'/',-1), '-', 1 ) as streamfile, daqhost from datasets,run2pp where runnumber>=run2pp.firstrun and runnumber<=run2pp.lastrun),

         intt_stream as (
              select streamfile, daqhost as names from streams where daqhost in ( 'intt0', 'intt1', 'intt2', 'intt3', 'intt4', 'intt5', 'intt6', 'intt7' )
         ),
         mvtx_stream as (
              select streamfile, daqhost as names from streams where daqhost in ( 'mvtx0',  'mvtx1',  'mvtx2',  'mvtx3',  'mvtx4',  'mvtx5' )
         ),
         tpot_stream as ( 
              select streamfile, 'TPOT' as names from streams where daqhost in ( 'ebdc39' ) 
         ),
         tpc_stream as (
              select streamfile, replace( daqhost, 'ebdc', 'TPC' ) as streamname from streams where daqhost in ( 'ebdc00', 'ebdc01', 'ebdc02', 'ebdc03', 'ebdc04', 'ebdc05', 'ebdc06', 'ebdc07', 'ebdc08', 'ebdc09', 
                                                                                    'ebdc10', 'ebdc11', 'ebdc12', 'ebdc13', 'ebdc14', 'ebdc15', 'ebdc16', 'ebdc17', 'ebdc18', 'ebdc19', 
                                                                                    'ebdc20', 'ebdc21', 'ebdc22', 'ebdc23' ) 
         ),
         all_streams as ( 
             select * from tpc_stream
                 union
             select * from intt_stream
                 union 
             select * from mvtx_stream
                 union
             select * from tpot_stream
         ),

         all_jobs as (

           select 'rawdb/datasets' as source,
                   runnumber,
                   0 as segment,
                   string_agg( distinct split_part(filename,'/',-1), ' ' ) as files,
                   'na' as fileranges,
                   UPPER(all_streams.streamname) as streamname,
                   all_streams.streamfile
 
           from datasets, run2pp, all_streams

           where 
           runnumber>=run2pp.firstrun and runnumber<=run2pp.lastrun and
           (
               (filename  like '%GL1_cosmics%.evt'   and lastevent>2 ) or
               (filename  like '%'||all_streams.streamfile||'%' )           
           )

           {run_condition}

           group by runnumber,all_streams.streamfile,all_streams.streamname

           having
                max(lastevent)>1000          and
                sum( case when filename like '%GL1%' then 1 else 0 end )>0 and
                (
                   sum( case when filename like '%TPC%'   then 1 else 0 end )>0 or
                   sum( case when filename like '%intt%'  then 1 else 0 end )>0 or
                   sum( case when filename like '%mvtx%'  then 1 else 0 end )>0 or
                   sum( case when filename like '%TPOT%'  then 1 else 0 end )>0 
                )

           )        

           select * from all_jobs  order by runnumber desc;


              ;


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     batch_name            : "$(name)_$(build)_$(tag)_$(version)-singlestreams"
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '4000'
     request_xferslots: '0'




DST_TRKR_CLUSTER_run3auau_streams:

   params:
     name:       DST_TRKR_CLUSTER_run3auau
     build:      ana.466
     build_name: ana466
     dbtag:      2024p012
     version:    1
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_singlejob0.sh
     payload :   ./ProdFlow/run3auau/TrackingProduction/
     neventsper:      10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/TrackingProduction/*,odbc.ini"
     mem     :   4000MB
     mnrun   : 51428
     mxrun   : 56000
     dstin   : 'DST_STREAMING_EVENT_%_run3auau'
     dataset : 'ana466_nocdbtag_v001'

   input:
      db: fc
      query: |-
         with allruns as (
         select
                'filecatalog/datasets'         as source        ,
                runnumber                                       ,
                segment                                         ,
                string_agg( distinct filename, ' ' ) as files   ,
                'NA'  as fileranges,
                count(distinct filename) as ninputs
         from
                datasets
         where
                dsttype like '{dstin}' and dataset='{dataset}'
                {run_condition}
                and runnumber>={mnrun}
                and runnumber<={mxrun}

         group by runnumber, segment

         order by runnumber {limit_condition}
         )

         select * from allruns where allruns.ninputs=39 order by runnumber, segment


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '4000'
     request_xferslots: '0'

     
